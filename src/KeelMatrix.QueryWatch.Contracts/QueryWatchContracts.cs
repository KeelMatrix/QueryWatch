// <auto-generated/>
#nullable enable
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

#if NETSTANDARD2_0
namespace System.Runtime.CompilerServices
{
    // This type is required for C# 9.0 init-only setters support on .NET Standard 2.0.
    internal static class IsExternalInit { }
}
#endif

namespace KeelMatrix.QueryWatch.Contracts
{
    /// <summary>
    /// Wire contracts for QueryWatch JSON. Keep additive over time; do not remove or rename fields.
    /// </summary>
    public sealed class Summary
    {
        [JsonPropertyName("schema")]
        public string Schema { get; init; } = "1.0.0";

        [JsonPropertyName("startedAt")]
        public DateTimeOffset StartedAt { get; init; }

        [JsonPropertyName("stoppedAt")]
        public DateTimeOffset StoppedAt { get; init; }

        [JsonPropertyName("totalQueries")]
        public int TotalQueries { get; init; }

        [JsonPropertyName("totalDurationMs")]
        public double TotalDurationMs { get; init; }

        [JsonPropertyName("averageDurationMs")]
        public double AverageDurationMs { get; init; }

        [JsonPropertyName("events")]
        public IReadOnlyList<EventSample> Events { get; init; } = Array.Empty<EventSample>();

        /// <summary>Optional product-level metadata.</summary>
        [JsonPropertyName("meta")]
        public Dictionary<string, string> Meta { get; init; } = new();
    }

    /// <summary>Minimal per-event sample to keep files small yet useful.</summary>
    public sealed class EventSample
    {
        [JsonPropertyName("at")]
        public DateTimeOffset At { get; init; }

        [JsonPropertyName("durationMs")]
        public double DurationMs { get; init; }

        [JsonPropertyName("text")]
        public string Text { get; init; } = string.Empty;

        /// <summary>
        /// Optional, additive event-level metadata. We model values as JsonElement to keep the contract open
        /// while remaining compatible with source generation.
        /// </summary>
        [JsonPropertyName("meta")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Dictionary<string, JsonElement>? Meta { get; init; }
    }
}
